
1、java分了5片内存：
    寄存器、本地方法区、方法区、栈、堆。

2、堆内存中的变量都有默认初始化值。因为数据类型不同，值也不一样。

3、成员变量存在于堆内存中。静态变量存在于方法区中。

4、静态代码块：可以完成类的初始化。
    静态代码块随着类的加载而执行，而且只执行一次（new 多个对象就只执行一次）。
    如果和主函数在同一类中，优先于主函数执行。

5、静态代码块、构造代码块、构造函数同时存在时的执行顺序：静态代码块  构造代码块  构造函数。

6、单例设计模式：保证一个类在内存中的对象唯一性。

    比如：多程序读取一个配置文件时，建议配置文件封装成对象。会方便操作其中数据，又要保证多个程序读到的是同一个配置文件对象，
    就需要该配置文件对象在内存中是唯一的。

    Runtime()方法就是单例设计模式进行设计的。

    1，私有化构造函数；
    2，创建私有并静态的本类对象；
    3，定义公有并静态的方法，返回该对象。

7、抽象关键字abstract和哪些不可以共存？final ,	private , static
    抽象类中可不可以不定义抽象方法？可以。抽象方法目的仅仅为了不让该类创建对象。

8、类与类之间存在着继承关系，类与接口中间存在的是实现关系。
    继承用extends  ；实现用implements ；
    接口与接口之间存在着继承关系，接口可以多继承接口。

9、多态在子父类中的成员上的体现的特点：
    成员变量 --- 编译运行都看 = 左边。
    成员函数 --- 编译看 = 左边，运行看 = 右边。
    静态函数 --- 编译运行都看 = 左边。

10、Class getClass()：获取任意对象运行时的所属字节码文件对象。
    通常equals，toString，hashCode，在应用中都会被复写，建立具体对象的特有的内容。

11、如果A类需要直接访问B类中的成员，而B类又需要建立A类的对象。这时,为了方便设计和访问，直接将A类定义在B类中。就可以了。
    A类就称为内部类。内部类可以直接访问外部类中的成员。而外部类想要访问内部类，必须要建立内部类的对象。

12、如果内部类被静态修饰，相当于外部类，会出现访问局限性，只能访问外部类中的静态成员。
    注意；如果内部类中定义了静态成员，那么该内部类必须是静态的。

13、为什么内部类可以直接访问外部类中的成员呢？
    那是因为内部中都持有一个外部类的引用。这个是引用是 外部类名.this
    内部类可以定义在外部类中的成员位置上，也可以定义在外部类中的局部位置上。
    当内部类被定义在局部位置上，只能访问局部中被final修饰的局部变量。？？？？？？？？？？？

14、try对应多个catch时，如果有父类的catch语句块，一定要放在下面。

15、throw 和throws关键字的区别：
   throw用于抛出异常对象，后面跟的是异常对象；throw用在函数内。
   throws用于抛出异常类，后面跟的异常类名，可以跟多个，用逗号隔开。throws用在函数上。

16、Exception有一个特殊的子类RuntimeException，以及RuntimeException的子类是运行异常，
    也就说这个异常是编译时不被检查的异常。

17、System.exit(0); //退出jvm，只有这种情况finally不执行。

18、当异常出现后，在子父类进行覆盖时，有了一些新的特点：
   1：当子类覆盖父类的方法时，如果父类的方法抛出了异常，那么子类的方法要么不抛出异常要么抛出父类异常或者该异常的子类，不能抛出其他异常。
   2：如果父类抛出了多个异常，那么子类在覆盖时只能抛出父类的异常的子集。

19、如果父类或者接口中的方法没有抛出过异常，那么子类是不可以抛出异常的，
    如果子类的覆盖的方法中出现了异常，只能try不能throws。
    如果这个异常子类无法处理，已经影响了子类方法的具体运算，这时可以在子类方法中，通过throw抛出RuntimeException异常或者其子类，
    这样，子类的方法上是不需要throws声明的。

20、脚标越界异常（IndexOutOfBoundsException）包括数组、字符串；
    空指针异常（NullPointerException）
    类型转换异常：ClassCastException
    没有这个元素异常：NullPointerException

21、进程：正在进行中的程序。其实进程就是一个应用程序运行时的内存分配空间。
    线程：其实就是进程中一个程序执行控制单元，一条执行路径。进程负责的是应用程序的空间的标示。线程负责的是应用程序的执行顺序。

22、一个进程至少有一个线程在运行，当一个进程中出现多个线程时，就称这个应用程序是多线程应用程序，
    每个线程在栈区中都有自己的执行空间，自己的方法区、自己的变量。
    jvm在启动的时，首先有一个主线程，负责程序的执行，调用的是main函数。主线程执行的代码都在main方法中。
    当产生垃圾时，收垃圾的动作，是不需要主线程来完成，因为这样，会出现主线程中的代码执行会停止，会去运行垃圾回收器代码，效率较低，
    所以由单独一个线程来负责垃圾回收。

23、随机性的原理：因为cpu的快速切换造成，哪个线程获取到了cpu的执行权，哪个线程就执行。

24、定义同步是有前提的：
    1，必须要有两个或者两个以上的线程，才需要同步。
    2，多个线程必须保证使用的是同一个锁。

25、同步代码块和同步函数的区别？
    同步代码块使用的锁可以是任意对象。
    同步函数使用的锁是this，静态同步函数的锁是该类的字节码文件对象。
    在一个类中只有一个同步，可以使用同步函数。如果有多同步，必须使用同步代码块，来确定不同的锁。所以同步代码块相对灵活一些。

26、请写一个延迟加载的单例模式？写懒汉式；当出现多线程访问时怎么解决？加同步，解决安全问题；效率高吗？不高；怎样解决？通过双重判断的形式解决。
   //懒汉式：延迟加载方式。
   当多线程访问懒汉式时，因为懒汉式的方法内对共性数据进行多条语句的操作。所以容易出现线程安全问题。为了解决，加入同步机制，解决安全问题。但是却带来了效率降低。
   为了效率问题，通过双重判断的形式解决。
   class Single{
   	private static Single s = null;
   	private Single(){}
   	public static Single getInstance(){ //锁是谁？字节码文件对象；
   		if(s == null){
   			synchronized(Single.class){
   				if(s == null)
   					s = new Single();
   			}
   		}
   		return s;
   	}
   }

27、同步死锁：通常只要将同步进行嵌套，就可以看到现象。同步函数中有同步代码块，同步代码块中还有同步函数。

28、等待唤醒机制：涉及的方法：
    wait:将同步中的线程处于冻结状态。释放了执行权，释放了资格。同时将线程对象存储到线程池中。
    notify：唤醒线程池中某一个等待线程。
    notifyAll:唤醒的是线程池中的所有线程。

29、注意：
    1：这些方法都需要定义在同步中。
    2：因为这些方法必须要标示所属的锁。
        你要知道 A锁上的线程被wait了,那这个线程就相当于处于A锁的线程池中，只能A锁的notify唤醒。
    3：这三个方法都定义在Object类中。为什么操作线程的方法定义在Object类中？
   	    因为这三个方法都需要定义同步内，并标示所属的同步锁，既然被锁调用，而锁又可以是任意对象，那么能被任意对象调用的方法一定定义在Object类中。

30、wait和sleep区别： 分析这两个方法：从执行权和锁上来分析：
    wait：可以指定时间也可以不指定时间。不指定时间，只能由对应的notify或者notifyAll来唤醒。
    sleep：必须指定时间，时间到自动从冻结状态转成运行状态(临时阻塞状态)。
    wait：线程会释放执行权，而且线程会释放锁。
    Sleep：线程会释放执行权，但不是不释放锁。？？？？？？？？？？？？？？

31、线程的停止：通过stop方法就可以停止线程。但是这个方式过时了。
    停止线程：原理就是：让线程运行的代码结束，也就是结束run方法。
    怎么结束run方法？一般run方法里肯定定义循环。所以只要结束循环即可。
    第一种方式：定义循环的结束标记。
    第二种方式：如果线程处于了冻结状态，是不可能读到标记的，这时就需要通过Thread类中的interrupt方法，将其冻结状态强制清除。
        让线程恢复具备执行资格的状态，让线程可以读到标记，并结束。

32、---------< java.lang.Thread >----------
    interrupt()：中断线程。
    setPriority(int newPriority)：更改线程的优先级。
    getPriority()：返回线程的优先级。
    toString()：返回该线程的字符串表示形式，包括线程名称、优先级和线程组。
    Thread.yield()：暂停当前正在执行的线程对象，并执行其他线程。
    setDaemon(true)：将该线程标记为守护线程或用户线程。将该线程标记为守护线程或用户线程。当正在运行的线程都是守护线程时，Java 虚拟机退出。
        该方法必须在启动线程前调用。
    join：临时加入一个线程的时候可以使用join方法。
    当A线程执行到了B线程的join方式。A线程处于冻结状态，释放了执行权，B开始执行。
        A什么时候执行呢？只有当B线程运行结束后，A才从冻结状态恢复运行状态执行。

33、Lock接口：多线程在JDK1.5版本升级时，推出一个接口Lock接口。
    同步是隐示的锁操作，而Lock对象是显示的锁操作，它的出现就替代了同步。
    在之前的版本中使用Object类中wait、notify、notifyAll的方式来完成的。
        那是因为同步中的锁是任意对象，所以操作锁的等待唤醒的方法都定义在Object类中。
    而现在锁是指定对象Lock。所以查找等待唤醒机制方式需要通过Lock接口来完成。
        而Lock接口中并没有直接操作等待唤醒的方法，而是将这些方式又单独封装到了一个对象中。
        这个对象就是Condition，将Object中的三个方法进行单独的封装。
        并提供了功能一致的方法 await()、signal()、signalAll()体现新版本对象的好处。

34、StringBuffer 和 StringBuilder 的区别：
    StringBuffer线程安全。
    StringBuilder线程不安全。
    单线程操作，使用StringBuilder 效率高。
    多线程操作，使用StringBuffer 安全。

35、集合和数组的区别：
    1：数组是固定长度的；集合可变长度的。
    2：数组可以存储基本数据类型，也可以存储引用数据类型；集合只能存储引用数据类型。
    3：数组存储的元素必须是同一个数据类型；集合存储的对象可以是不同数据类型。

36、数据结构：就是容器中存储数据的方式。

37、对于集合容器，有很多种。因为每一个容器的自身特点不同，其实原理在于每个容器的内部数据结构不同。
    集合容器在不断向上抽取过程中。出现了集合体系。
    在使用一个体系时，原则：参阅顶层内容。建立底层对象。

38、每一个集合都有自己的数据结构，都有特定的取出自己内部元素的方式。
    为了便于操作所有的容器，取出元素。将容器内部的取出方式按照一个统一的规则向外提供，这个规则就是Iterator接口。
    也就说，只要通过该接口就可以取出Collection集合中的元素，
    至于每一个具体的容器依据自己的数据结构，如何实现的具体取出细节，这个不用关心，这样就降低了取出元素和具体集合的耦合性。

39、List本身是Collection接口的子接口，具备了Collection的所有方法。
    现在学习List体系特有的共性方法，查阅方法发现List的特有方法都有索引，这是该集合最大的特点。

40、List：有序(元素存入集合的顺序和取出的顺序一致)，元素都有索引。元素可以重复。
    |--ArrayList：底层的数据结构是数组,线程不同步，ArrayList替代了Vector，查询元素的速度非常快。
   	|--LinkedList：底层的数据结构是链表，线程不同步，增删元素的速度非常快。
   	|--Vector：底层的数据结构就是数组，线程同步的，Vector无论查询和增删都巨慢。

41、在进行list列表元素迭代的时候，如果想要在迭代过程中，想要对元素进行操作的时候，比如满足条件添加新元素。
    会发生.ConcurrentModificationException并发修改异常。
    导致的原因是：
        集合引用和迭代器引用在同时操作元素，通过集合获取到对应的迭代器后，在迭代中，进行集合引用的元素添加，迭代器并不知道，所以会出现异常情况。
    如何解决呢？
        既然是在迭代中对元素进行操作,找迭代器的方法最为合适.可是Iterator中只有hasNext,next,remove方法.
        通过查阅的它的子接口,ListIterator,发现该列表迭代器接口具备了对元素的增、删、改、查的动作。

42、可变长度数组的原理：
    当元素超出数组长度，会产生一个新数组，将原数组的数据复制到新数组中，再将新的元素添加到新数组中。
        ArrayList：是按照原数组的50%延长。构造一个初始容量为 10 的空列表。
        Vector：是按照原数组的100%延长。
    注意：对于list集合，底层判断元素是否相同，其实用的是元素自身的equals方法完成的。
        所以建议元素都要复写equals方法，建立元素对象自己的比较相同的条件依据。

43、Set接口中的方法和Collection中方法一致的。Set接口取出方式只有一种，迭代器。
    |--HashSet：底层数据结构是哈希表，线程是不同步的。无序，高效；
   		HashSet集合保证元素唯一性：通过元素的hashCode方法，和equals方法完成的。
   		当元素的hashCode值相同时，才继续判断元素的equals是否为true。
   		如果为true，那么视为相同元素，不存。如果为false，那么存储。
   		如果hashCode值不同，那么不判断equals，从而提高对象比较的速度。
            |--LinkedHashSet：有序，hashset的子类。
   	|--TreeSet：对Set集合中的元素的进行指定顺序的排序。不同步。TreeSet底层的数据结构就是二叉树。

44、哈希表的原理：
    1，对对象元素中的关键字(对象中的特有数据)，进行哈希算法的运算，并得出一个具体的算法值，这个值 称为哈希值。
    2，哈希值就是这个元素的位置。
    3，如果哈希值出现冲突，再次判断这个关键字对应的对象是否相同。如果对象相同，就不存储，因为元素重复。
        如果对象不同，就存储，在原来对象的哈希值基础 +1顺延。
    4，存储哈希值的结构，我们称为哈希表。
    5，既然哈希表是根据哈希值存储的，为了提高效率，最好保证对象的关键字是唯一的。
   	    这样可以尽量少的判断关键字对应的对象是否相同，提高了哈希表的操作效率。

45、对于ArrayList集合，判断元素是否存在，或者删元素底层依据都是equals方法。
    对于HashSet集合，判断元素是否存在，或者删除元素，底层依据的是hashCode方法和equals方法。

46、TreeSet:
    用于对Set集合进行元素的指定顺序排序，排序需要依据元素自身具备的比较性。
   	如果元素不具备比较性，在运行时会发生ClassCastException异常。
   	所以需要元素实现Comparable接口，强制让元素具备比较性，复写compareTo方法。
   	依据compareTo方法的返回值，确定元素在TreeSet数据结构中的位置。
   	TreeSet方法保证元素唯一性的方式：就是参考比较方法的结果是否为0，如果return 0，视为两个对象重复，不存。

47、注意：在进行比较时，如果判断元素不唯一，比如，同姓名，同年龄，才视为同一个人。
   	在判断时，需要分主要条件和次要条件，当主要条件相同时，再判断次要条件，按照次要条件排序。

48、TreeSet集合排序有两种方式，Comparable和Comparator区别：
    1：让元素自身具备比较性，需要元素对象实现Comparable接口，覆盖compareTo方法。
    2：让集合自身具备比较性，需要定义一个实现了Comparator接口的比较器，并覆盖compare方法，并将该类对象作为实际参数传递给TreeSet集合的构造函数。
    第二种方式较为灵活。

49、Map集合：
    |--Hashtable：底层是哈希表数据结构，是线程同步的。不可以存储null键，null值。
    |--HashMap：底层是哈希表数据结构，是线程不同步的。可以存储null键，null值。替代了Hashtable.
    |--TreeMap：底层是二叉树结构，可以对map集合中的键进行指定顺序的排序。

50、Map集合存储和Collection有着很大不同：
    Collection一次存一个元素；Map一次存一对元素。
    Collection是单列集合；Map是双列集合。
    Map中的存储的一对元素：一个是键，一个是值，键与值之间有对应(映射)关系。
    特点：要保证map集合中键的唯一性。

51、把map集合转成set的方法：
    Set keySet();
   	Set entrySet();//取的是键和值的映射关系。

52、使用集合的技巧：
        看到Array就是数组结构，有角标，查询速度很快。
        看到link就是链表结构：增删速度快，而且有特有方法。addFirst； addLast； removeFirst()； removeLast()； getFirst()；getLast()；
        看到hash就是哈希表，就要想要哈希值，就要想到唯一性，就要想到存入到该结构的中的元素必须覆盖hashCode，equals方法。
        看到tree就是二叉树，就要想到排序，就想要用到比较。
    比较的两种方式：
        一个是Comparable：覆盖compareTo方法；
        一个是Comparator：覆盖compare方法。
    LinkedHashSet，LinkedHashMap:这两个集合可以保证哈希表有存入顺序和取出顺序一致，保证哈希表有序。
    集合什么时候用？
        当存储的是一个元素时，就用Collection。当存储对象之间存在着映射关系时，就使用Map集合。
        保证唯一，就用Set。不保证唯一，就用List。

53、Collections：它的出现给集合操作提供了更多的功能。这个类不需要创建对象，内部提供的都是静态方法。
    静态方法：
    Collections.sort(list);//list集合进行元素的自然顺序排序。
    Collections.sort(list,new ComparatorByLen());//按指定的比较器方法排序。
   class ComparatorByLen implements Comparator<String>{
   	public int compare(String s1,String s2){
   		int temp = s1.length()-s2.length();
   		return temp==0?s1.compareTo(s2):temp;
   	}
   }
    Collections.max(list); //返回list中字典顺序最大的元素。
    int index = Collections.binarySearch(list,"zz");//二分查找，返回角标。
    Collections.reverseOrder();//逆向反转排序。
    Collections.shuffle(list);//随机对list中的元素进行位置的置换。

54、将非同步集合转成同步集合的方法：Collections中的  XXX synchronizedXXX(XXX);
    List synchronizedList(list);
    Map synchronizedMap(map);
    原理：定义一个类，将集合所有的方法加同一把锁后返回。

55、高级for循环和传统for循环的区别：
    高级for循环在使用时，必须要明确被遍历的目标。
        这个目标，可以是Collection集合或者数组，如果遍历Collection集合，在遍历过程中还需要对元素进行操作，比如删除，需要使用迭代器。
    如果遍历数组，还需要对数组元素进行操作，建议用传统for循环因为可以定义角标通过角标操作元素。
        如果只为遍历获取，可以简化成高级for循环，它的出现为了简化书写。
    高级for循环可以遍历map集合吗？不可以。但是可以将map转成set后再使用foreach语句。

56、可变参数（...）：用到函数的参数上，当要操作的同一个类型元素个数不确定的时候，可是用这个方式，这个参数可以接受任意个数的同一类型的数据。
    和以前接收数组不一样的是：
        以前定义数组类型，需要先创建一个数组对象，再将这个数组对象作为参数传递给函数。现在，直接将数组中的元素作为参数传递即可。
        底层其实是将这些元素进行数组的封装，而这个封装动作，是在底层完成的，被隐藏了。所以简化了用户的书写，少了调用者定义数组的动作。
        如果在参数列表中使用了可变参数，可变参数必须定义在参数列表结尾(也就是必须是最后一个参数，否则编译会失败。)。

57、静态导入：导入了类中的所有静态成员，简化静态成员的书写。
    import static java.util.Collections.*;  //导入了Collections类中的所有静态成员

58、jdk5以前基本数据类型和包装类之间需要互转：
    基本---引用   Integer x = new Integer(x);
    引用---基本   int num = x.intValue();
    1)、Integer x = 1; x = x + 1;  经历了什么过程？装箱  拆箱  装箱；
    2)、为了优化，虚拟机为包装类提供了缓冲池，Integer池的大小 -128~127 一个字节的大小；
    3)、String池：Java为了优化字符串操作 提供了一个缓冲池；

59、泛型：jdk1.5版本以后出现的一个安全机制。表现格式：< >
    好处：
    1：将运行时期的问题ClassCastException问题转换成了编译失败，体现在编译时期，程序员就可以解决问题。
    2：避免了强制转换的麻烦。

60、泛型技术：其实应用在编译时期，是给编译器使用的技术，到了运行时期，泛型就不存在了。为什么?
    因为泛型的擦除：
        也就是说，编辑器检查了泛型的类型正确后，在生成的类文件中是没有泛型的。
    在运行时，如何知道获取的元素类型而不用强转呢？
    泛型的补偿：
        因为存储的时候，类型已经确定了是同一个类型的元素，所以在运行时，只要获取到该元素的类型，在内部进行一次转换即可，
        所以使用者不用再做转换动作了。

61、什么时候用泛型类呢？
    当类中的操作的引用数据类型不确定的时候，以前用的Object来进行扩展的，现在可以用泛型来表示。
    这样可以避免强转的麻烦，而且将运行问题转移到的编译时期。

62、泛型在程序定义上的体现：
    //泛型类：将泛型定义在类上。
   class Tool<Q> {
   	private Q obj;
   	public  void setObject(Q obj) {
   		this.obj = obj;
   	}
   	public Q getObject() {
   		return obj;
   	}
   }
    //当方法操作的引用数据类型不确定的时候，可以将泛型定义在方法上。
   	public <W> void method(W w) {
   		System.out.println("method:"+w);
   	}
    //静态方法上的泛型：静态方法无法访问类上定义的泛型。如果静态方法操作的引用数据类型不确定的时候，必须要将泛型定义在方法上。
   	public static <Q> void function(Q t) {
   		System.out.println("function:"+t);
   	}
    //泛型接口.
   interface Inter<T> {
   	void show(T t);
   }
   class InterImpl<R> implements Inter<R> {
   	public void show(R r) {
   		System.out.println("show:"+r);
   	}
   }

63、泛型中的通配符：可以解决当具体类型不确定的时候，这个通配符就是 ?  ；当操作类型时，不需要使用类型的具体功能时，只使用Object类中的功能。
        那么可以用 ? 通配符来表未知类型。
    泛型限定：
   	    上限：？extends E：可以接收E类型或者E的子类型对象。
   	    下限：？super E：可以接收E类型或者E的父类型对象。
    上限什么时候用：
        往集合中添加元素时，既可以添加E类型对象，又可以添加E的子类型对象。为什么？因为取的时候，E类型既可以接收E类对象，又可以接收E的子类型对象。
    下限什么时候用：
        当从集合中获取元素进行操作的时候，可以用当前元素的类型接收，也可以用当前元素的父类型接收。

64、Properties getProperties() ;  // 获取当前系统的属性信息
    Properties prop = System.getProperties(); //获取系统的属性信息，并将这些信息存储到Properties集合中。
    System.setProperty("myname","毕老师"); //给系统属性信息集添加具体的属性信息
    //临时设置方式：运行jvm时，可以通过jvm的参数进行系统属性的临时设置，可以在java命令的后面加入 –D<name>=<value>
        用法：java –Dmyname=小明 类名。
    String name = System.getProperty("os.name");//获取指定属性的信息

65、API--- java.util.Math: 用于数学运算的工具类，属性和行为都是静态的。该类是final不允许继承。
    static double ceil(double a) ; //返回大于指定数值的最小整数
    static double floor(double a) ; //返回小于指定数值的最大整数
    static long round(double a) ; //四舍五入成整数
    static double pow(double a, double b) ; //a的b次幂
    static double random(); //返回0~1的伪随机数







