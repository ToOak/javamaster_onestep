
1、java分了5片内存：
    寄存器、本地方法区、方法区、栈、堆。

2、堆内存中的变量都有默认初始化值。因为数据类型不同，值也不一样。

3、成员变量存在于堆内存中。静态变量存在于方法区中。

4、静态代码块：可以完成类的初始化。
    静态代码块随着类的加载而执行，而且只执行一次（new 多个对象就只执行一次）。
    如果和主函数在同一类中，优先于主函数执行。

5、静态代码块、构造代码块、构造函数同时存在时的执行顺序：静态代码块  构造代码块  构造函数。

6、单例设计模式：保证一个类在内存中的对象唯一性。

    比如：多程序读取一个配置文件时，建议配置文件封装成对象。会方便操作其中数据，又要保证多个程序读到的是同一个配置文件对象，
    就需要该配置文件对象在内存中是唯一的。

    Runtime()方法就是单例设计模式进行设计的。

    1，私有化构造函数；
    2，创建私有并静态的本类对象；
    3，定义公有并静态的方法，返回该对象。

7、抽象关键字abstract和哪些不可以共存？final ,	private , static
    抽象类中可不可以不定义抽象方法？可以。抽象方法目的仅仅为了不让该类创建对象。

8、类与类之间存在着继承关系，类与接口中间存在的是实现关系。
    继承用extends  ；实现用implements ；
    接口与接口之间存在着继承关系，接口可以多继承接口。

9、多态在子父类中的成员上的体现的特点：
    成员变量 --- 编译运行都看 = 左边。
    成员函数 --- 编译看 = 左边，运行看 = 右边。
    静态函数 --- 编译运行都看 = 左边。

10、Class getClass()：获取任意对象运行时的所属字节码文件对象。
    通常equals，toString，hashCode，在应用中都会被复写，建立具体对象的特有的内容。

11、如果A类需要直接访问B类中的成员，而B类又需要建立A类的对象。这时,为了方便设计和访问，直接将A类定义在B类中。就可以了。
    A类就称为内部类。内部类可以直接访问外部类中的成员。而外部类想要访问内部类，必须要建立内部类的对象。

12、如果内部类被静态修饰，相当于外部类，会出现访问局限性，只能访问外部类中的静态成员。
    注意；如果内部类中定义了静态成员，那么该内部类必须是静态的。

13、为什么内部类可以直接访问外部类中的成员呢？
    那是因为内部中都持有一个外部类的引用。这个是引用是 外部类名.this
    内部类可以定义在外部类中的成员位置上，也可以定义在外部类中的局部位置上。
    当内部类被定义在局部位置上，只能访问局部中被final修饰的局部变量。？？？？？？？？？？？

14、try对应多个catch时，如果有父类的catch语句块，一定要放在下面。

15、throw 和throws关键字的区别：
   throw用于抛出异常对象，后面跟的是异常对象；throw用在函数内。
   throws用于抛出异常类，后面跟的异常类名，可以跟多个，用逗号隔开。throws用在函数上。

16、Exception有一个特殊的子类RuntimeException，以及RuntimeException的子类是运行异常，
    也就说这个异常是编译时不被检查的异常。

17、System.exit(0); //退出jvm，只有这种情况finally不执行。

18、当异常出现后，在子父类进行覆盖时，有了一些新的特点：
   1：当子类覆盖父类的方法时，如果父类的方法抛出了异常，那么子类的方法要么不抛出异常要么抛出父类异常或者该异常的子类，不能抛出其他异常。
   2：如果父类抛出了多个异常，那么子类在覆盖时只能抛出父类的异常的子集。

19、如果父类或者接口中的方法没有抛出过异常，那么子类是不可以抛出异常的，
    如果子类的覆盖的方法中出现了异常，只能try不能throws。
    如果这个异常子类无法处理，已经影响了子类方法的具体运算，这时可以在子类方法中，通过throw抛出RuntimeException异常或者其子类，
    这样，子类的方法上是不需要throws声明的。

20、脚标越界异常（IndexOutOfBoundsException）包括数组、字符串；
    空指针异常（NullPointerException）
    类型转换异常：ClassCastException
    没有这个元素异常：NullPointerException

21、进程：正在进行中的程序。其实进程就是一个应用程序运行时的内存分配空间。
    线程：其实就是进程中一个程序执行控制单元，一条执行路径。进程负责的是应用程序的空间的标示。线程负责的是应用程序的执行顺序。

22、一个进程至少有一个线程在运行，当一个进程中出现多个线程时，就称这个应用程序是多线程应用程序，
    每个线程在栈区中都有自己的执行空间，自己的方法区、自己的变量。
    jvm在启动的时，首先有一个主线程，负责程序的执行，调用的是main函数。主线程执行的代码都在main方法中。
    当产生垃圾时，收垃圾的动作，是不需要主线程来完成，因为这样，会出现主线程中的代码执行会停止，会去运行垃圾回收器代码，效率较低，
    所以由单独一个线程来负责垃圾回收。

23、随机性的原理：因为cpu的快速切换造成，哪个线程获取到了cpu的执行权，哪个线程就执行。

24、定义同步是有前提的：
    1，必须要有两个或者两个以上的线程，才需要同步。
    2，多个线程必须保证使用的是同一个锁。

25、同步代码块和同步函数的区别？
    同步代码块使用的锁可以是任意对象。
    同步函数使用的锁是this，静态同步函数的锁是该类的字节码文件对象。
    在一个类中只有一个同步，可以使用同步函数。如果有多同步，必须使用同步代码块，来确定不同的锁。所以同步代码块相对灵活一些。

26、请写一个延迟加载的单例模式？写懒汉式；当出现多线程访问时怎么解决？加同步，解决安全问题；效率高吗？不高；怎样解决？通过双重判断的形式解决。
   //懒汉式：延迟加载方式。
   当多线程访问懒汉式时，因为懒汉式的方法内对共性数据进行多条语句的操作。所以容易出现线程安全问题。为了解决，加入同步机制，解决安全问题。但是却带来了效率降低。
   为了效率问题，通过双重判断的形式解决。
   class Single{
   	private static Single s = null;
   	private Single(){}
   	public static Single getInstance(){ //锁是谁？字节码文件对象；
   		if(s == null){
   			synchronized(Single.class){
   				if(s == null)
   					s = new Single();
   			}
   		}
   		return s;
   	}
   }

27、同步死锁：通常只要将同步进行嵌套，就可以看到现象。同步函数中有同步代码块，同步代码块中还有同步函数。

28、等待唤醒机制：涉及的方法：
    wait:将同步中的线程处于冻结状态。释放了执行权，释放了资格。同时将线程对象存储到线程池中。
    notify：唤醒线程池中某一个等待线程。
    notifyAll:唤醒的是线程池中的所有线程。

29、注意：
    1：这些方法都需要定义在同步中。
    2：因为这些方法必须要标示所属的锁。
        你要知道 A锁上的线程被wait了,那这个线程就相当于处于A锁的线程池中，只能A锁的notify唤醒。
    3：这三个方法都定义在Object类中。为什么操作线程的方法定义在Object类中？
   	    因为这三个方法都需要定义同步内，并标示所属的同步锁，既然被锁调用，而锁又可以是任意对象，那么能被任意对象调用的方法一定定义在Object类中。

30、wait和sleep区别： 分析这两个方法：从执行权和锁上来分析：
    wait：可以指定时间也可以不指定时间。不指定时间，只能由对应的notify或者notifyAll来唤醒。
    sleep：必须指定时间，时间到自动从冻结状态转成运行状态(临时阻塞状态)。
    wait：线程会释放执行权，而且线程会释放锁。
    Sleep：线程会释放执行权，但不是不释放锁。？？？？？？？？？？？？？？

31、线程的停止：通过stop方法就可以停止线程。但是这个方式过时了。
    停止线程：原理就是：让线程运行的代码结束，也就是结束run方法。
    怎么结束run方法？一般run方法里肯定定义循环。所以只要结束循环即可。
    第一种方式：定义循环的结束标记。
    第二种方式：如果线程处于了冻结状态，是不可能读到标记的，这时就需要通过Thread类中的interrupt方法，将其冻结状态强制清除。
        让线程恢复具备执行资格的状态，让线程可以读到标记，并结束。

32、---------< java.lang.Thread >----------
    interrupt()：中断线程。
    setPriority(int newPriority)：更改线程的优先级。
    getPriority()：返回线程的优先级。
    toString()：返回该线程的字符串表示形式，包括线程名称、优先级和线程组。
    Thread.yield()：暂停当前正在执行的线程对象，并执行其他线程。
    setDaemon(true)：将该线程标记为守护线程或用户线程。将该线程标记为守护线程或用户线程。当正在运行的线程都是守护线程时，Java 虚拟机退出。
        该方法必须在启动线程前调用。
    join：临时加入一个线程的时候可以使用join方法。
    当A线程执行到了B线程的join方式。A线程处于冻结状态，释放了执行权，B开始执行。
        A什么时候执行呢？只有当B线程运行结束后，A才从冻结状态恢复运行状态执行。

33、Lock接口：多线程在JDK1.5版本升级时，推出一个接口Lock接口。
    同步是隐示的锁操作，而Lock对象是显示的锁操作，它的出现就替代了同步。
    在之前的版本中使用Object类中wait、notify、notifyAll的方式来完成的。
        那是因为同步中的锁是任意对象，所以操作锁的等待唤醒的方法都定义在Object类中。
    而现在锁是指定对象Lock。所以查找等待唤醒机制方式需要通过Lock接口来完成。
        而Lock接口中并没有直接操作等待唤醒的方法，而是将这些方式又单独封装到了一个对象中。
        这个对象就是Condition，将Object中的三个方法进行单独的封装。
        并提供了功能一致的方法 await()、signal()、signalAll()体现新版本对象的好处。

34、StringBuffer 和 StringBuilder 的区别：
    StringBuffer线程安全。
    StringBuilder线程不安全。
    单线程操作，使用StringBuilder 效率高。
    多线程操作，使用StringBuffer 安全。

35、集合和数组的区别：
    1：数组是固定长度的；集合可变长度的。
    2：数组可以存储基本数据类型，也可以存储引用数据类型；集合只能存储引用数据类型。
    3：数组存储的元素必须是同一个数据类型；集合存储的对象可以是不同数据类型。

36、数据结构：就是容器中存储数据的方式。

37、对于集合容器，有很多种。因为每一个容器的自身特点不同，其实原理在于每个容器的内部数据结构不同。
    集合容器在不断向上抽取过程中。出现了集合体系。
    在使用一个体系时，原则：参阅顶层内容。建立底层对象。

38、每一个集合都有自己的数据结构，都有特定的取出自己内部元素的方式。
    为了便于操作所有的容器，取出元素。将容器内部的取出方式按照一个统一的规则向外提供，这个规则就是Iterator接口。
    也就说，只要通过该接口就可以取出Collection集合中的元素，
    至于每一个具体的容器依据自己的数据结构，如何实现的具体取出细节，这个不用关心，这样就降低了取出元素和具体集合的耦合性。

39、List本身是Collection接口的子接口，具备了Collection的所有方法。
    现在学习List体系特有的共性方法，查阅方法发现List的特有方法都有索引，这是该集合最大的特点。

40、List：有序(元素存入集合的顺序和取出的顺序一致)，元素都有索引。元素可以重复。
    |--ArrayList：底层的数据结构是数组,线程不同步，ArrayList替代了Vector，查询元素的速度非常快。
   	|--LinkedList：底层的数据结构是链表，线程不同步，增删元素的速度非常快。
   	|--Vector：底层的数据结构就是数组，线程同步的，Vector无论查询和增删都巨慢。

41、在进行list列表元素迭代的时候，如果想要在迭代过程中，想要对元素进行操作的时候，比如满足条件添加新元素。
    会发生.ConcurrentModificationException并发修改异常。
    导致的原因是：
        集合引用和迭代器引用在同时操作元素，通过集合获取到对应的迭代器后，在迭代中，进行集合引用的元素添加，迭代器并不知道，所以会出现异常情况。
    如何解决呢？
        既然是在迭代中对元素进行操作,找迭代器的方法最为合适.可是Iterator中只有hasNext,next,remove方法.
        通过查阅的它的子接口,ListIterator,发现该列表迭代器接口具备了对元素的增、删、改、查的动作。

42、可变长度数组的原理：
    当元素超出数组长度，会产生一个新数组，将原数组的数据复制到新数组中，再将新的元素添加到新数组中。
        ArrayList：是按照原数组的50%延长。构造一个初始容量为 10 的空列表。
        Vector：是按照原数组的100%延长。
    注意：对于list集合，底层判断元素是否相同，其实用的是元素自身的equals方法完成的。
        所以建议元素都要复写equals方法，建立元素对象自己的比较相同的条件依据。

43、Set接口中的方法和Collection中方法一致的。Set接口取出方式只有一种，迭代器。
    |--HashSet：底层数据结构是哈希表，线程是不同步的。无序，高效；
   		HashSet集合保证元素唯一性：通过元素的hashCode方法，和equals方法完成的。
   		当元素的hashCode值相同时，才继续判断元素的equals是否为true。
   		如果为true，那么视为相同元素，不存。如果为false，那么存储。
   		如果hashCode值不同，那么不判断equals，从而提高对象比较的速度。
            |--LinkedHashSet：有序，hashset的子类。
   	|--TreeSet：对Set集合中的元素的进行指定顺序的排序。不同步。TreeSet底层的数据结构就是二叉树。

44、哈希表的原理：
    1，对对象元素中的关键字(对象中的特有数据)，进行哈希算法的运算，并得出一个具体的算法值，这个值 称为哈希值。
    2，哈希值就是这个元素的位置。
    3，如果哈希值出现冲突，再次判断这个关键字对应的对象是否相同。如果对象相同，就不存储，因为元素重复。
        如果对象不同，就存储，在原来对象的哈希值基础 +1顺延。
    4，存储哈希值的结构，我们称为哈希表。
    5，既然哈希表是根据哈希值存储的，为了提高效率，最好保证对象的关键字是唯一的。
   	    这样可以尽量少的判断关键字对应的对象是否相同，提高了哈希表的操作效率。

45、对于ArrayList集合，判断元素是否存在，或者删元素底层依据都是equals方法。
    对于HashSet集合，判断元素是否存在，或者删除元素，底层依据的是hashCode方法和equals方法。

46、TreeSet:
    用于对Set集合进行元素的指定顺序排序，排序需要依据元素自身具备的比较性。
   	如果元素不具备比较性，在运行时会发生ClassCastException异常。
   	所以需要元素实现Comparable接口，强制让元素具备比较性，复写compareTo方法。
   	依据compareTo方法的返回值，确定元素在TreeSet数据结构中的位置。
   	TreeSet方法保证元素唯一性的方式：就是参考比较方法的结果是否为0，如果return 0，视为两个对象重复，不存。

47、注意：在进行比较时，如果判断元素不唯一，比如，同姓名，同年龄，才视为同一个人。
   	在判断时，需要分主要条件和次要条件，当主要条件相同时，再判断次要条件，按照次要条件排序。

48、TreeSet集合排序有两种方式，Comparable和Comparator区别：
    1：让元素自身具备比较性，需要元素对象实现Comparable接口，覆盖compareTo方法。
    2：让集合自身具备比较性，需要定义一个实现了Comparator接口的比较器，并覆盖compare方法，并将该类对象作为实际参数传递给TreeSet集合的构造函数。
    第二种方式较为灵活。

49、Map集合：
    |--Hashtable：底层是哈希表数据结构，是线程同步的。不可以存储null键，null值。
    |--HashMap：底层是哈希表数据结构，是线程不同步的。可以存储null键，null值。替代了Hashtable.
    |--TreeMap：底层是二叉树结构，可以对map集合中的键进行指定顺序的排序。

50、Map集合存储和Collection有着很大不同：
    Collection一次存一个元素；Map一次存一对元素。
    Collection是单列集合；Map是双列集合。
    Map中的存储的一对元素：一个是键，一个是值，键与值之间有对应(映射)关系。
    特点：要保证map集合中键的唯一性。

51、把map集合转成set的方法：
    Set keySet();
   	Set entrySet();//取的是键和值的映射关系。

52、使用集合的技巧：
        看到Array就是数组结构，有角标，查询速度很快。
        看到link就是链表结构：增删速度快，而且有特有方法。addFirst； addLast； removeFirst()； removeLast()； getFirst()；getLast()；
        看到hash就是哈希表，就要想要哈希值，就要想到唯一性，就要想到存入到该结构的中的元素必须覆盖hashCode，equals方法。
        看到tree就是二叉树，就要想到排序，就想要用到比较。
    比较的两种方式：
        一个是Comparable：覆盖compareTo方法；
        一个是Comparator：覆盖compare方法。
    LinkedHashSet，LinkedHashMap:这两个集合可以保证哈希表有存入顺序和取出顺序一致，保证哈希表有序。
    集合什么时候用？
        当存储的是一个元素时，就用Collection。当存储对象之间存在着映射关系时，就使用Map集合。
        保证唯一，就用Set。不保证唯一，就用List。

53、Collections：它的出现给集合操作提供了更多的功能。这个类不需要创建对象，内部提供的都是静态方法。
    静态方法：
    Collections.sort(list);//list集合进行元素的自然顺序排序。
    Collections.sort(list,new ComparatorByLen());//按指定的比较器方法排序。
   class ComparatorByLen implements Comparator<String>{
   	public int compare(String s1,String s2){
   		int temp = s1.length()-s2.length();
   		return temp==0?s1.compareTo(s2):temp;
   	}
   }
    Collections.max(list); //返回list中字典顺序最大的元素。
    int index = Collections.binarySearch(list,"zz");//二分查找，返回角标。
    Collections.reverseOrder();//逆向反转排序。
    Collections.shuffle(list);//随机对list中的元素进行位置的置换。

54、将非同步集合转成同步集合的方法：Collections中的  XXX synchronizedXXX(XXX);
    List synchronizedList(list);
    Map synchronizedMap(map);
    原理：定义一个类，将集合所有的方法加同一把锁后返回。

55、高级for循环和传统for循环的区别：
    高级for循环在使用时，必须要明确被遍历的目标。
        这个目标，可以是Collection集合或者数组，如果遍历Collection集合，在遍历过程中还需要对元素进行操作，比如删除，需要使用迭代器。
    如果遍历数组，还需要对数组元素进行操作，建议用传统for循环因为可以定义角标通过角标操作元素。
        如果只为遍历获取，可以简化成高级for循环，它的出现为了简化书写。
    高级for循环可以遍历map集合吗？不可以。但是可以将map转成set后再使用foreach语句。

56、可变参数（...）：用到函数的参数上，当要操作的同一个类型元素个数不确定的时候，可是用这个方式，这个参数可以接受任意个数的同一类型的数据。
    和以前接收数组不一样的是：
        以前定义数组类型，需要先创建一个数组对象，再将这个数组对象作为参数传递给函数。现在，直接将数组中的元素作为参数传递即可。
        底层其实是将这些元素进行数组的封装，而这个封装动作，是在底层完成的，被隐藏了。所以简化了用户的书写，少了调用者定义数组的动作。
        如果在参数列表中使用了可变参数，可变参数必须定义在参数列表结尾(也就是必须是最后一个参数，否则编译会失败。)。

57、静态导入：导入了类中的所有静态成员，简化静态成员的书写。
    import static java.util.Collections.*;  //导入了Collections类中的所有静态成员

58、jdk5以前基本数据类型和包装类之间需要互转：
    基本---引用   Integer x = new Integer(x);
    引用---基本   int num = x.intValue();
    1)、Integer x = 1; x = x + 1;  经历了什么过程？装箱  拆箱  装箱；
    2)、为了优化，虚拟机为包装类提供了缓冲池，Integer池的大小 -128~127 一个字节的大小；
    3)、String池：Java为了优化字符串操作 提供了一个缓冲池；

59、泛型：jdk1.5版本以后出现的一个安全机制。表现格式：< >
    好处：
    1：将运行时期的问题ClassCastException问题转换成了编译失败，体现在编译时期，程序员就可以解决问题。
    2：避免了强制转换的麻烦。

60、泛型技术：其实应用在编译时期，是给编译器使用的技术，到了运行时期，泛型就不存在了。为什么?
    因为泛型的擦除：
        也就是说，编辑器检查了泛型的类型正确后，在生成的类文件中是没有泛型的。
    在运行时，如何知道获取的元素类型而不用强转呢？
    泛型的补偿：
        因为存储的时候，类型已经确定了是同一个类型的元素，所以在运行时，只要获取到该元素的类型，在内部进行一次转换即可，
        所以使用者不用再做转换动作了。

61、什么时候用泛型类呢？
    当类中的操作的引用数据类型不确定的时候，以前用的Object来进行扩展的，现在可以用泛型来表示。
    这样可以避免强转的麻烦，而且将运行问题转移到的编译时期。

62、泛型在程序定义上的体现：
    //泛型类：将泛型定义在类上。
   class Tool<Q> {
   	private Q obj;
   	public  void setObject(Q obj) {
   		this.obj = obj;
   	}
   	public Q getObject() {
   		return obj;
   	}
   }
    //当方法操作的引用数据类型不确定的时候，可以将泛型定义在方法上。
   	public <W> void method(W w) {
   		System.out.println("method:"+w);
   	}
    //静态方法上的泛型：静态方法无法访问类上定义的泛型。如果静态方法操作的引用数据类型不确定的时候，必须要将泛型定义在方法上。
   	public static <Q> void function(Q t) {
   		System.out.println("function:"+t);
   	}
    //泛型接口.
   interface Inter<T> {
   	void show(T t);
   }
   class InterImpl<R> implements Inter<R> {
   	public void show(R r) {
   		System.out.println("show:"+r);
   	}
   }

63、泛型中的通配符：可以解决当具体类型不确定的时候，这个通配符就是 ?  ；当操作类型时，不需要使用类型的具体功能时，只使用Object类中的功能。
        那么可以用 ? 通配符来表未知类型。
    泛型限定：
   	    上限：？extends E：可以接收E类型或者E的子类型对象。
   	    下限：？super E：可以接收E类型或者E的父类型对象。
    上限什么时候用：
        往集合中添加元素时，既可以添加E类型对象，又可以添加E的子类型对象。为什么？因为取的时候，E类型既可以接收E类对象，又可以接收E的子类型对象。
    下限什么时候用：
        当从集合中获取元素进行操作的时候，可以用当前元素的类型接收，也可以用当前元素的父类型接收。

64、Properties getProperties() ;  // 获取当前系统的属性信息
    Properties prop = System.getProperties(); //获取系统的属性信息，并将这些信息存储到Properties集合中。
    System.setProperty("myname","毕老师"); //给系统属性信息集添加具体的属性信息
    //临时设置方式：运行jvm时，可以通过jvm的参数进行系统属性的临时设置，可以在java命令的后面加入 –D<name>=<value>
        用法：java –Dmyname=小明 类名。
    String name = System.getProperty("os.name");//获取指定属性的信息

65、API--- java.util.Math: 用于数学运算的工具类，属性和行为都是静态的。该类是final不允许继承。
    static double ceil(double a) ; //返回大于指定数值的最小整数
    static double floor(double a) ; //返回小于指定数值的最大整数
    static long round(double a) ; //四舍五入成整数
    static double pow(double a, double b) ; //a的b次幂
    static double random(); //返回0~1的伪随机数

66、close()和flush()的区别：
    flush()：将缓冲区的数据刷到目的地中后，流可以使用。
    close()：将缓冲区的数据刷到目的地中后，流就关闭了，该方法主要用于结束调用的底层资源。这个动作一定做。
    io异常的处理方式：io一定要写finally；

67、IO中的使用到了一个设计模式：装饰设计模式。
    装饰设计模式解决：对一组类进行功能的增强。
    包装：写一个类(包装类)对被包装对象进行包装；
    * 1、包装类和被包装对象要实现同样的接口；
    * 2、包装类要持有一个被包装对象；
    * 3、包装类在实现接口时，大部分方法是靠调用被包装对象来实现的，对于需要修改的方法我们自己实现；

68、字符流：
    Reader：用于读取字符流的抽象类。子类必须实现的方法只有 read(char[], int, int) 和 close()。
         |---BufferedReader：从字符输入流中读取文本，缓冲各个字符，从而实现字符、数组和行的高效读取。 可以指定缓冲区的大小，或者可使用默认的大小。大多数情况下，默认值就足够大了。
            |---LineNumberReader：跟踪行号的缓冲字符输入流。此类定义了方法 setLineNumber(int) 和 getLineNumber()，它们可分别用于设置和获取当前行号。
         |---InputStreamReader：是字节流通向字符流的桥梁：它使用指定的 charset 读取字节并将其解码为字符。它使用的字符集可以由名称指定或显式给定，或者可以接受平台默认的字符集。
            |---FileReader：用来读取字符文件的便捷类。此类的构造方法假定默认字符编码和默认字节缓冲区大小都是适当的。要自己指定这些值，可以先在 FileInputStream 上构造一个 InputStreamReader。
         |---CharArrayReader：
         |---StringReader：
    Writer：写入字符流的抽象类。子类必须实现的方法仅有 write(char[], int, int)、flush() 和 close()。
         |---BufferedWriter：将文本写入字符输出流，缓冲各个字符，从而提供单个字符、数组和字符串的高效写入。
         |---OutputStreamWriter：是字符流通向字节流的桥梁：可使用指定的 charset 将要写入流中的字符编码成字节。它使用的字符集可以由名称指定或显式给定，否则将接受平台默认的字符集。
            |---FileWriter：用来写入字符文件的便捷类。此类的构造方法假定默认字符编码和默认字节缓冲区大小都是可接受的。要自己指定这些值，可以先在 FileOutputStream 上构造一个 OutputStreamWriter。
         |---PrintWriter：
         |---CharArrayWriter：
         |---StringWriter：

69、字节流：
    InputStream：是表示字节输入流的所有类的超类。
         |--- FileInputStream：从文件系统中的某个文件中获得输入字节。哪些文件可用取决于主机环境。FileInputStream 用于读取诸如图像数据之类的原始字节流。要读取字符流，请考虑使用 FileReader。
         |--- FilterInputStream：包含其他一些输入流，它将这些流用作其基本数据源，它可以直接传输数据或提供一些额外的功能。
            |--- BufferedInputStream：该类实现缓冲的输入流。
            |--- Stream：
         |--- ObjectInputStream：
         |--- PipedInputStream：
    -----------------------------------------------
    OutputStream：此抽象类是表示输出字节流的所有类的超类。
         |--- FileOutputStream：文件输出流是用于将数据写入 File 或 FileDescriptor 的输出流。
         |--- FilterOutputStream：此类是过滤输出流的所有类的超类。
            |--- BufferedOutputStream：该类实现缓冲的输出流。
            |--- PrintStream：
            |--- DataOutputStream：
         |--- ObjectOutputStream：
         |--- PipedOutputStream：

70、流的操作规律：
    1，明确源和目的。
    	数据源：就是需要读取，可以使用两个体系：InputStream、Reader；
    	数据汇：就是需要写入，可以使用两个体系：OutputStream、Writer；
    2，操作的数据是否是纯文本数据？
    	如果是：数据源：Reader
    		    数据汇：Writer
    	如果不是：数据源：InputStream
    		      数据汇：OutputStream
    3，虽然确定了一个体系，但是该体系中有太多的对象，到底用哪个呢？
    	明确操作的数据设备。
    	数据源对应的设备：硬盘(File)，内存(数组)，键盘(System.in)
    	数据汇对应的设备：硬盘(File)，内存(数组)，控制台(System.out)。
    4，需要在基本操作上附加其他功能吗？比如缓冲。
    	如果需要就进行装饰。

71、转换流特有功能：转换流可以将字节转成字符，原因在于，将获取到的字节通过查编码表获取到指定对应字符。
    转换流的最强功能就是基于 字节流 + 编码表 。没有转换，没有字符流。

72、发现转换流有一个子类就是操作文件的字符流对象：
        InputStreamReader
            |--FileReader
        OutputStreamWriter
            |--FileWrier
    想要操作文本文件，必须要进行编码转换，而编码转换动作转换流都完成了。所以操作文件的流对象只要继承自转换流就可以读取一个字符了。
    但是子类有一个局限性，就是子类中使用的编码是固定的，是本机默认的编码表，对于简体中文版的系统默认码表是GBK。
        FileReader fr = new FileReader("a.txt");
        InputStreamReader isr = new InputStreamReader(new FileInputStream("a.txt"),"gbk");
        以上两句代码功能一致，
        如果仅仅使用平台默认码表，就使用FileReader fr = new FileReader("a.txt"); //因为简化。
        如果需要制定码表，必须用转换流。
    转换流 = 字节流+编码表。
    转换流的子类File = 字节流 + 默认编码表。
    凡是操作设备上的文本数据，涉及编码转换，必须使用转换流。

73、File类：将文件系统中的文件和文件夹封装成了对象。
    提供了更多的属性和行为可以对这些文件和文件夹进行操作。
    这些是流对象办不到的，因为流只操作数据。

74、File类常见方法：
    1：创建。
    	boolean createNewFile()：在指定目录下创建文件，如果该文件已存在，则不创建。而对操作文件的输出流而言，输出流对象已建立，就会创建文件，如果文件已存在，会覆盖。除非续写。
    	boolean mkdir()：创建此抽象路径名指定的目录。
    	boolean mkdirs()：创建多级目录。
    2：删除。
    	boolean delete()：删除此抽象路径名表示的文件或目录。
    	void deleteOnExit()：在虚拟机退出时删除。
    注意：在删除文件夹时，必须保证这个文件夹中没有任何内容，才可以将该文件夹用delete删除。
    	window的删除动作，是从里往外删。注意：java删除文件不走回收站。要慎用。
    3：获取.
    	long length()：获取文件大小。
    	String getName()：返回由此抽象路径名表示的文件或目录的名称。
    	String getPath()：将此抽象路径名转换为一个路径名字符串。
    	String getAbsolutePath()：返回此抽象路径名的绝对路径名字符串。
    	String getParent()：返回此抽象路径名父目录的抽象路径名，如果此路径名没有指定父目录，则返回 null。
    long lastModified()：返回此抽象路径名表示的文件最后一次被修改的时间。
    File.pathSeparator：返回当前系统默认的路径分隔符，windows默认为 “；”。
    File.Separator：返回当前系统默认的目录分隔符，windows默认为 “\”。
    4：判断：
    	boolean exists()：判断文件或者文件夹是否存在。
    	boolean isDirectory()：测试此抽象路径名表示的文件是否是一个目录。
    	boolean isFile()：测试此抽象路径名表示的文件是否是一个标准文件。
    	boolean isHidden()：测试此抽象路径名指定的文件是否是一个隐藏文件。
    	boolean isAbsolute()：测试此抽象路径名是否为绝对路径名。
    5：重命名。
    	 boolean renameTo(File dest)：可以实现移动的效果。剪切+重命名。
    String[] list()：列出指定目录下的当前的文件和文件夹的名称。包含隐藏文件。
    如果调用list方法的File 对象中封装的是一个文件，那么list方法返回数组为null。如果封装的对象不存在也会返回null。只有封装的对象存在并且是文件夹时，这个方法才有效。

75、递归：就是函数自身调用自身。
    什么时候用递归呢？
        当一个功能被重复使用，而每一次使用该功能时的参数不确定，都由上次的功能元素结果来确定。
        简单说：功能内部又用到该功能，但是传递的参数值不确定。(每次功能参与运算的未知内容不确定)。
    递归的注意事项：
        1：一定要定义递归的条件。
        2：递归的次数不要过多。容易出现 StackOverflowError 栈内存溢出错误。
        其实递归就是在栈内存中不断的加载同一个函数。

76、Java.util.Properties：一个可以将键值进行持久化存储的对象。Map--Hashtable的子类。
    特点：1：可以持久化存储数据。2：键值都是字符串。3：一般用于配置文件。
    |-- load()：将流中的数据加载进集合。
        原理：其实就是将读取流和指定文件相关联，并读取一行数据，因为数据是规则的key=value，所以获取一行后，通过 = 对该行数据进行切割，左边就是键，右边就是值，将键、值存储到properties集合中。
    |-- store()：写入各个项后，刷新输出流。
    |-- list()：将集合的键值数据列出到指定的目的地。

77、SequenceInputStream：序列流，作用就是将多个读取流合并成一个读取流。实现数据合并。
    表示其他输入流的逻辑串联。它从输入流的有序集合开始，并从第一个输入流开始读取，直到到达文件末尾，接着从第二个输入流读取，依次类推，直到到达包含的最后一个输入流的文件末尾为止。
    这样做，可以更方便的操作多个读取流，其实这个序列流内部会有一个有序的集合容器，用于存储多个读取流对象。
    该对象的构造函数参数是枚举，想要获取枚举，需要有Vector集合，但不高效。需用ArrayList，但ArrayList中没有枚举，只有自己去创建枚举对象。
    但是方法怎么实现呢？因为枚举操作的是具体集合中的元素，所以无法具体实现，但是枚举和迭代器是功能一样的，所以，可以用迭代替代枚举。
        合并原理：多个读取流对应一个输出流。
        切割原理：一个读取流对应多个输出流。

78、RandomAccessFile:
    特点：
    1：该对象即可读取，又可写入。
    2：该对象中的定义了一个大型的byte数组，通过定义指针来操作这个数组。
    3：可以通过该对象的getFilePointer()获取指针的位置，通过seek()方法设置指针的位置。
    4：该对象操作的源和目的必须是文件。
    5：其实该对象内部封装了字节读取流和字节写入流。
    注意：实现随机访问，最好是数据有规律。

79、管道流：管道读取流和管道写入流可以像管道一样对接上，管道读取流就可以读取管道写入流写入的数据。
    注意：需要加入多线程技术，因为单线程，先执行read，会发生死锁，因为read方法是阻塞式的，没有数据的read方法会让线程等待。
    PipedInputStream pipin = new PipedInputStream();
    	PipedOutputStream pipout = new PipedOutputStream();
    	pipin.connect(pipout);

80、对象的序列化：目的：将一个具体的对象进行持久化，写入到硬盘上。
        注意：静态数据不能被序列化，因为静态数据不在堆内存中，是存储在静态方法区中。
        如何将非静态的数据不进行序列化？用transient 关键字修饰此变量即可。
        Serializable：用于启动对象的序列化功能，可以强制让指定类具备序列化功能，该接口中没有成员，这是一个标记接口。
            这个标记接口用于给序列化类提供UID。这个uid是依据类中的成员的数字签名进行运行获取的。
            如果不需要自动获取一个uid，可以在类中，手动指定一个名称为serialVersionUID id号。
            依据编译器的不同，或者对信息的高度敏感性。最好每一个序列化的类都进行手动显示的UID的指定。

81、DataOutputStream、DataInputStream：专门用于操作基本数据类型数据的对象。
    DataOutputStream dos =  new DataOutputStream(new FileOutputStream("data.txt"));
    dos.writeInt(256);
    dos.close();
   	DataInputStream dis = new DataInputStream(new FileInputStream("data.txt"));
   	int num = dis.readInt();
   	System.out.println(num);
   	dis.close();

82、ByteArrayInputStream：源：内存
    ByteArrayOutputStream：目的：内存。
    这两个流对象不涉及底层资源调用，操作的都是内存中数组，所以不需要关闭。
    直接操作字节数组就可以了，为什么还要把数组封装到流对象中呢？
        因为数组本身没有方法，只有一个length属性。为了便于数组的操作，将数组进行封装，对外提供方法操作数组中的元素。
    对于数组元素操作无非两种操作：设置（写）和获取（读），而这两操作正好对应流的读写操作。这两个对象就是使用了流的读写思想来操作数组。
    //创建源：
    	ByteArrayInputStream bis = new ByteArrayInputStream("abcdef".getBytes());
    	//创建目的：
    	ByteArrayOutputStream bos = new ByteArrayOutputStream();
    	int ch = 0;
    	while((ch=bis.read())!=-1){
    		bos.write(ch);
    	}
    	System.out.println(bos.toString());

83、 //Discription:[深度复制方法,需要对象及对象所有的对象属性都实现序列化]　
    public CartData mCopy() {
        CartData cartData = null;
        try {
            // 将该对象序列化成流,因为写在流里的是对象的一个拷贝，
            // 而原对象仍然存在于JVM里面。所以利用这个特性可以实现对象的深拷贝
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(baos);
            oos.writeObject(this);
            // 将流序列化成对象
            ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
            ObjectInputStream ois = new ObjectInputStream(bais);
            cartData = (CartData) ois.readObject();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        return cartData;
    }

84、端口：
    物理端口：
    逻辑端口：用于标识进程的逻辑地址，不同进程的标识；有效端口：0~65535，其中0~1024系统使用或保留端口。
    java 中ip对象：InetAddress.
    import java.net.*;
    class  IPDemo{
    	public static void main(String[] args) throws UnknownHostException{
    		//通过名称(ip字符串or主机名)来获取一个ip对象。
    		InetAddress ip = InetAddress.getByName("www.baidu.com");//java.net.UnknownHostException
    		System.out.println("addr:"+ip.getHostAddress());
    		System.out.println("name:"+ip.getHostName());
    	}
    }

85、Socket：★★★★，套接字，通信的端点。
    就是为网络服务提供的一种机制，通信的两端都有Socket，网络通信其实就是Socket间的通信，数据在两个Socket间通过IO传输。

86、UDP传输：
    1，只要是网络传输，必须有socket 。
    2，数据一定要封装到数据包中，数据包中包括目的地址、端口、数据等信息。
    直接操作udp不可能，对于java语言应该将udp封装成对象，易于我们的使用，这个对象就是DatagramSocket. 封装了udp传输协议的socket对象。
    因为数据包中包含的信息较多，为了操作这些信息方便，也一样会将其封装成对象。
        这个数据包对象就是：DatagramPacket.通过这个对象中的方法，就可以获取到数据包中的各种信息。
    DatagramSocket具备发送和接受功能，在进行udp传输时，需要明确一个是发送端，一个是接收端。

87、udp的发送端：
    1，建立udp的socket服务，创建对象时如果没有明确端口，系统会自动分配一个未被使用的端口。
    2，明确要发送的具体数据。
    3，将数据封装成了数据包。
    4，用socket服务的send方法将数据包发送出去。
    5，关闭资源。

88、udp的接收端：
    1，创建udp的socket服务，必须要明确一个端口，作用在于，只有发送到这个端口的数据才是这个接收端可以处理的数据。
    2，定义数据包，用于存储接收到数据。
    3，通过socket服务的接收方法将收到的数据存储到数据包中。
    4，通过数据包的方法获取数据包中的具体数据内容，比如ip、端口、数据等等。
    5，关闭资源。

89、TCP传输：两个端点的建立连接后会有一个传输数据的通道，这通道称为流，
    而且是建立在网络基础上的流，称之为socket流。该流中既有读取，也有写入。
    tcp的两个端点：一个是客户端，一个是服务端。
        客户端：对应的对象，Socket
        服务端：对应的对象，ServerSocket

90、TCP客户端：
    1，建立tcp的socket服务，最好明确具体的地址和端口。这个对象在创建时，就已经可以对指定ip和端口进行连接(三次握手)。
    2，如果连接成功，就意味着通道建立了，socket流就已经产生了。只要获取到socket流中的读取流和写入流即可，
        只要通过getInputStream和getOutputStream就可以获取两个流对象。
    3，关闭资源。

91、TCP服务端：
    1，创建服务端socket服务，并监听一个端口。
    2，服务端为了给客户端提供服务，获取客户端的内容，可以通过accept方法获取连接过来的客户端对象。
    3，可以通过获取到的socket对象中的socket流和具体的客户端进行通讯。
    4，如果通讯结束，关闭资源。注意：要先关客户端，再关服务端。

92、反射技术：其实就是动态加载一个指定的类，并获取该类中的所有的内容。
        而且将字节码文件封装成对象，并将字节码文件中的内容都封装成对象，这样便于操作这些成员。
        简单说：反射技术可以对一个类进行解剖。
    反射的好处：大大的增强了程序的扩展性。

93、反射的基本步骤：
    1、获得Class对象，就是获取到指定的名称的字节码文件对象。
    2、实例化对象，获得类的属性、方法或构造函数。
    3、访问属性、调用方法、调用构造函数创建对象。

94、获取这个Class对象，有三种方式：
    1：通过每个对象都具备的方法getClass来获取。弊端：必须要创建该类对象，才可以调用getClass方法。
    2：每一个数据类型(基本数据类型和引用数据类型)都有一个静态的属性class。弊端：必须要先明确该类。
    	 前两种方式不利于程序的扩展，因为都需要在程序使用具体的类来完成。
    3：使用的Class类中的方法，静态的forName方法。
    	 指定什么类名，就获取什么类字节码文件对象，这种方式的扩展性最强，只要将类名的字符串传入即可。
    // 1. 根据给定的类名来获得  用于类加载
    String classname = "cn.itcast.reflect.Person";// 来自配置文件
    Class clazz = Class.forName(classname);// 此对象代表Person.class
    // 2. 如果拿到了对象，不知道是什么类型   用于获得对象的类型
    Object obj = new Person();
    Class clazz1 = obj.getClass();// 获得对象具体的类型
    // 3. 如果是明确地获得某个类的Class对象  主要用于传参
    Class clazz2 = Person.class;

95、反射的用法：
    1）、需要获得java类的各个组成部分，首先需要获得类的Class对象，获得Class对象的三种方式：
    	Class.forName(classname)	用于做类加载
    	obj.getClass()				用于获得对象的类型
    	类名.class			    用于获得指定的类型，传参用
    2)、反射类的成员方法：
    	Class clazz = Person.class;
    	Method method = clazz.getMethod(methodName, new Class[]{paramClazz1, paramClazz2});
    	method.invoke();
    3)、反射类的构造函数：
    	Constructor con = clazz.getConstructor(new Class[]{paramClazz1, paramClazz2,...})
    	con.newInstance(params...)
    4)、反射类的属性：
    	Field field = clazz.getField(fieldName);
    	field.setAccessible(true);
    	field.setObject(value);

96、获取了字节码文件对象后，最终都需要创建指定类的对象：
    创建对象的两种方式(其实就是对象在进行实例化时的初始化方式)：
    1，调用空参数的构造函数：使用了Class类中的newInstance()方法。
    2，调用带参数的构造函数：先要获取指定参数列表的构造函数对象，然后通过该构造函数的对象的newInstance(实际参数) 进行对象的初始化。
    综上所述，第二种方式，必须要先明确具体的构造函数的参数类型，不便于扩展。
        所以一般情况下，被反射的类，内部通常都会提供一个公有的空参数的构造函数。

97、getDeclaredMethod（私有方法） setAccessible getConstructors getDeclaredConstructors getMethods getDeclaredMethods

98、正则表达式：其实是用来操作字符串的一些规则。
    好处：正则的出现，对字符串的复杂操作变得更为简单。
    特点：将对字符串操作的代码用一些符号来表示。只要使用了指定符号，就可以调用底层的代码对字符串进行操作。符号的出现，简化了代码的书写。
    弊端：符号的出现虽然简化了书写，但是却降低了阅读性。
    其实更多是用正则解决字符串操作的问题。

99、常见操作：
    1，匹配：其实用的就是String类中的matches方法。
    String reg = "[1-9][0-9]{4,14}";
    	boolean b = qq.matches(reg);//将正则和字符串关联对字符串进行匹配。
    2，切割：其实用的就是String类中的split方法。
    3，替换：其实用的就是String类中的replaceAll();
    4，获取：
        1），先要将正则表达式编译成正则对象。使用的是Pattern中静态方法 compile(regex);
    	2），通过Pattern对象获取Matcher对象。
    		Pattern用于描述正则表达式，可以对正则表达式进行解析。
    		而将规则操作字符串，需要从新封装到匹配器对象Matcher中。
    		然后使用Matcher对象的方法来操作字符串。
    		如何获取匹配器对象呢？
    		通过Pattern对象中的matcher方法。该方法可以正则规则和字符串想关联。并返回匹配器对象。
    	3），使用Matcher对象中的方法即可对字符串进行各种正则操作。


